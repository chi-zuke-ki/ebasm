#!/usr/bin/env python3

import argparse
import re
import sys

label_re = r'(\.[A-Za-z_]\w*)'
label_line_re = r'^\s*%s:' % label_re


def unsigned(n):
    """Converts int "n" to an unsigned hex representation."""

    assert n >= -128 and n <= 127
    s = bin(-n)[2:]
    s = ('0' * (8 - len(s))) + s
    return '%02x' % (
        n if n >= 0 else int(s.replace('0', 'x')
                              .replace('1', '0')
                              .replace('x', '1'), base=2) + 1)

def rom_loc(asm, out, loc):
    """Outputs the start of a code block at a given ROM address."""

    if asm.func_open:
        out.extend(('}', ''))
    asm.func_open = True
    out.append('ROM[%s] = {' % loc)

def subr(asm, out, name):
    """Outputs the start of a code block for a new subroutine."""

    if asm.func_open:
        out.extend(('}', ''))
    asm.func_open = True
    out.append('%s: {' % name)

def blank(asm, out, *args):
    """Outputs a blank line, if output_comments is set."""

    if asm.output_comments:
        out.append('')

def optional_blank(asm, out, *args):
    """Outputs a blank line unless the last line is already blank, if
       output_comments is set."""

    if asm.output_comments and out[-1] != '':
        out.append('')

def comment(asm, out, whitespace, comment):
    """Outputs a comment in CCS given the comment and preceding whitespace."""

    if asm.output_comments:
        out.append('%s//%s' % (whitespace, comment))

def jsl_fn(asm, out, name):
    """Outputs a call to JSL with the given subroutine name."""

    out.append('    JSL(%s)' % name)

def inst(op, size):
    """Returns a function that outputs an instruction with opcode "op" which is
       "size" bytes long."""

    return lambda asm, out, arg='': (
        out.append(('    "[%s' + ' %s' * (size - 1) + ']"') %
                   (op, *(arg[i:i + 2].lower()
                          for i in range(len(arg) - 2, -1, -2)))))

def bra_label(op):
    """Returns a function that takes a label and outputs a branch instruction
       with opcode "op" and offset to the label."""

    return lambda asm, out, label: _bra_label(asm, out, op, label)

def _bra_label(asm, out, op, label):
    off = asm.labels[label] - asm.byte_idx
    if off < -128 or off > 127:
        print('Offset to label "%s" too large.' % label, file=sys.stderr)
        sys.exit(1)

    n = unsigned(off)
    inst(op, 2)(asm, out, n)

def re_inst(op, size, prefix='', suffix=''):
    """Returns a regular expression that matches operation name "op", a given
       number of bytes, and optionally a prefix ("#", for literals) or suffix
       (",X" or ",Y")."""

    return r'%s\s+%s\$([A-Fa-f0-9]{%d})%s' % (
           op, prefix, 2 * (size - 1), suffix)

def re_bra(op):
     """Returns a regular expression that matches a branch to a label."""

     return r'%s\s+%s' % (op, label_re)

def rule(name, code, size):
    return re_inst(name, size), inst(code, size), size

def rule_imm(name, code, size):
    return re_inst(name, size, prefix='#'), inst(code, size), size

def rule_x(name, code, size):
    return re_inst(name, size, suffix=',X'), inst(code, size), size

def rule_y(name, code, size):
    return re_inst(name, size, suffix=',Y'), inst(code, size), size

def rule_byte(name, code):
    return name, inst(code, 1), 1

def rule_bra(name, code):
    return re_bra(name), bra_label(code), 2

rules = (
    (r'^\s*ROM\[(0x[A-Fa-f0-9]{6})\]:', rom_loc, 0),
               (r'^\s*([A-Za-z_]\w*):', subr, 0),

              (label_line_re, blank, 0),
             (r'^(\s*);(.*)', comment, 0),
                   (r'^\s*$', optional_blank, 0),

    (r'JSL\s+([A-Za-z_]\w*)', jsl_fn, 4),
                  rule('JMP', '4c', 3),
                  rule('JSL', '22', 4),

              rule_bra('BRA', '80'),
              rule_bra('BEQ', 'f0'),
              rule_bra('BNE', 'd0'),
              rule_bra('BLT', '90'),
              rule_bra('BGE', 'b0'),
              rule_imm('BEQ', 'f0', 2),

                rule_x('LDA', 'bd', 3),
                rule_x('LDA', 'b5', 2),
                rule_y('LDA', 'b9', 3),
              rule_imm('LDA', 'a9', 3),
                  rule('LDA', 'ad', 3),
                  rule('LDA', 'a5', 2),
              rule_imm('LDX', 'a2', 3),
                  rule('LDX', 'a6', 2),
              rule_imm('LDY', 'a0', 3),
                  rule('LDY', 'a4', 2),
                rule_x('STA', '9d', 3),
                rule_x('STA', '95', 2),
                rule_y('STA', '99', 3),
                  rule('STA', '85', 2),
                  rule('STX', '86', 2),
                  rule('STY', '84', 2),
                rule_x('STZ', '9e', 3),
                  rule('STZ', '64', 2),

                  rule('INC', 'e6', 2),
                rule_y('ADC', '79', 3),
              rule_imm('ADC', '69', 3),
                  rule('ADC', '65', 2),
              rule_imm('SBC', 'e9', 3),
                  rule('SBC', 'e5', 2),
              rule_imm('AND', '29', 3),
              rule_imm('CMP', 'c9', 3),
                  rule('CMP', 'c5', 2),
              rule_imm('REP', 'c2', 2),

             rule_byte('NOP', 'ea'),
             rule_byte('SEC', '38'),
             rule_byte('CLC', '18'),
             rule_byte('ASL', '0a'),
             rule_byte('TCD', '5b'),
             rule_byte('TDC', '7b'),
             rule_byte('TAX', 'aa'),
             rule_byte('TAY', 'a8'),
             rule_byte('TYA', '98'),
             rule_byte('PHD', '0b'),
             rule_byte('PLD', '2b'),
             rule_byte('RTL', '6b'),
)


class Assembler:
    def __init__(self, output_comments):
        self.output_comments = output_comments
        self.func_open = False
        self.labels = {}

    def assemble(self, in_text):
        """Returns CCS for given 65C816 assembly."""

        # Always output the JSL macro, for newly-defined subroutines.
        out_lines = [
            'command adr24(a) "[{byte[0] a} {byte[1] a} {byte[2] a}]"',
            'command JSL(a)   "[22 {adr24(a)}]"',
            '',
        ]

        # Track label positions.
        self.byte_idx = 0
        in_lines = in_text.splitlines()
        for i, line in enumerate(in_lines):
            match = re.search(label_line_re, line)
            if match:
                self.labels[match.group(1)] = self.byte_idx
                continue
            for pattern, _, byte_count in rules:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    self.byte_idx += byte_count
                    break
            else:
                print('Invalid syntax on line %d:\n%s' % (i + 1, line),
                      file=sys.stderr)
                sys.exit(1)

        # Generate code.
        self.byte_idx = 0
        for line in in_lines:
            for pattern, fn, byte_count in rules:
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    self.byte_idx += byte_count
                    fn(self, out_lines, *match.groups())
                    added_line = out_lines[-1]
                    if (self.output_comments and
                        not re.match(r'\s*$', line) and
                        not re.match(r'\s*;', line) and
                        (not added_line or
                         (added_line[-1] != '{' and added_line[-1] != ')'))):
                        out_lines[-1] += (
                            (' ' * (21 - len(added_line))) + '// ' + line)
                    break
            else:
                assert False

        if self.func_open:
            out_lines.append('}')

        return '\n'.join(out_lines)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename')
    parser.add_argument('-o', '--outfile')
    parser.add_argument(
        '--output-comments', action=argparse.BooleanOptionalAction)
    args = parser.parse_args()

    with open(args.filename) as in_file:
        in_text = in_file.read()

    asm = Assembler(args.output_comments)
    out_text = asm.assemble(in_text)
    if args.outfile:
        with open(args.outfile, 'w') as out_file:
            out_file.write(out_text)
    else:
        print(out_text)


if __name__ == '__main__':
    main()
